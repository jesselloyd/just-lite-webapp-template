function config(o,n,e){e.interceptors.push(["$q","$location",function(o,n){return{response:function(o){return o},responseError:function(e){return 401===e.status&&n.url("/login"),o.reject(e)}}}]);var t=function(o,n,e){var t=o.defer();return n.get("/loggedin").success(function(o){console.log("user check",o),o!==!1?t.resolve():(t.reject(),e.url("/login"))}),t.promise};t.$inject=["$q","$http","$location"],o.when("/",{templateUrl:"views/home.html",resolve:{loggedin:t}}).when("/login",{templateUrl:"views/login.html",resolve:{}}).otherwise({redirectTo:"/"}),n.html5Mode({enabled:!0,requireBase:!1})}function ApplicationController(o,n){var e=this;e.sendRequest=function(){o.get("/test").then(function(o){e.testRequest=o.data})},e.requestService=function(){return o.get("/test")},e.modalShown=!1,e.toggleModal=function(){e.modalShown=!e.modalShown},e.errorModalShown=!1,e.toggleErrorModal=function(){e.errorModalShown=!e.errorModalShown},e.sendError=function(){return n(function(o,n){var e={message:"Error! You did something that won't work. Try again, or contact someone!"};n(e)})}}function LoginController(o){var n=this;n.login=function(){o.post("/login",{email:"jesse",password:"password"})},n.logout=function(){o.post("/logout")},n.authenticatedRoute=function(){o.get("/api/private").then(function(o){console.log(o),n.isThrough="true"},function(o){console.log("failed"),n.isThrough="false"})},n.checkCsrfProtection=function(){o.post("/postendpoint").then(function(o){n.isProtected=o.data})}}function Modal(o,n){return{restrict:"EA",templateUrl:"views/templates/modal.html",scope:{title:"@",action:"&",actionText:"@",show:"="},transclude:!0,link:function(e,t,r){function i(){e.clearBindings=function(){},e.error=!1,e.fadeIn=!0,n(function(){e.fadeIn=!1},100)}i(),e.close=function(){return o(function(o,t){e.clearBindings(),e.error=!1,e.fadeOut=!0,n(function(){e.show=!1,e.fadeOut=!1},100)})},e.submit=function(){if(e.error=!1,e.errorMessage=null,"function"==typeof e.action&&"action"in r){var o=e.action();o&&"function"==typeof o.then?o.then(function(o){o.clearBindings&&(e.clearBindings=o.clearBindings),e.close()},function(o){o.clearBindings&&(e.clearBindings=res.clearBindings),e.errorFlash=!0,n(function(){e.errorFlash=!1,e.error=!0,e.errorMessage=o.message},200)}):e.close()}else e.close()}}}}config.$inject=["$routeProvider","$locationProvider","$httpProvider"],angular.module("App",["ngRoute"]),angular.module("App").config(config),angular.module("App").controller("ApplicationController",["$http","$q",ApplicationController]),angular.module("App").controller("LoginController",["$http",LoginController]),angular.module("App").directive("modal",["$q","$timeout",Modal]);
//# sourceMappingURL=data:application/json;base64,
