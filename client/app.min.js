function config(n,e){n.when("/",{templateUrl:"views/home.html",resolve:{}}).when("/login",{templateUrl:"views/login.html",resolve:{}}).otherwise({redirectTo:"/"}),e.html5Mode({enabled:!0,requireBase:!1})}function Modal(n,e){return{restrict:"EA",templateUrl:"views/templates/modal.html",scope:{title:"@",action:"&",actionText:"@",show:"="},transclude:!0,link:function(o,t,r){function i(){o.clearBindings=function(){},o.error=!1,o.fadeIn=!0,e(function(){o.fadeIn=!1},100)}i(),o.close=function(){return n(function(n,t){o.clearBindings(),o.error=!1,o.fadeOut=!0,e(function(){o.show=!1,o.fadeOut=!1},100)})},o.submit=function(){if(o.error=!1,o.errorMessage=null,"function"==typeof o.action&&"action"in r){var n=o.action();n&&"function"==typeof n.then?n.then(function(n){n.clearBindings?o.clearBindings=n.clearBindings:null,o.close()},function(n){n.clearBindings?o.clearBindings=n.clearBindings:null,o.errorFlash=!0,e(function(){o.errorFlash=!1,o.error=!0,o.errorMessage=n.message},200)}):o.close()}else o.close()}}}}function ApplicationController(n,e){var o=this;o.sendRequest=function(){n.get("/test").then(function(n){o.testRequest=n.data})},o.requestService=function(){return n.get("/test")},o.modalShown=!1,o.toggleModal=function(){o.modalShown=!o.modalShown},o.errorModalShown=!1,o.toggleErrorModal=function(){o.errorModalShown=!o.errorModalShown},o.sendError=function(){return e(function(n,e){var o={message:"Error! You did something that won't work. Try again, or contact someone!"};e(o)})}}function AuthenticationInterceptor(n){return{request:function(e){var o=n.localStorage.token;return o&&(e.headers["x-access-token"]=o),e}}}config.$inject=["$routeProvider","$locationProvider"],angular.module("App",["ngRoute"]),angular.module("App").config(config),angular.module("App").directive("modal",["$q","$timeout",Modal]),angular.module("App").controller("ApplicationController",["$http","$q",ApplicationController]),angular.module("App").factory("AuthenticationInterceptor",["$window",AuthenticationInterceptor]),angular.module("App").config(["$httpProvider",function(n){n.interceptors.push("AuthenticationInterceptor")}]);
//# sourceMappingURL=data:application/json;base64,
