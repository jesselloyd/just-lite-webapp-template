function config(e,n){e.when("/",{templateUrl:"views/home.html",resolve:{}}).when("/login",{templateUrl:"views/login.html",resolve:{}}).otherwise({redirectTo:"/"}),n.html5Mode({enabled:!0,requireBase:!1})}function ApplicationController(e,n){var o=this;o.sendRequest=function(){e.get("/test").then(function(e){o.testRequest=e.data})},o.requestService=function(){return e.get("/test")},o.modalShown=!1,o.toggleModal=function(){o.modalShown=!o.modalShown},o.errorModalShown=!1,o.toggleErrorModal=function(){o.errorModalShown=!o.errorModalShown},o.sendError=function(){return n(function(e,n){var o={message:"Error! You did something that won't work. Try again, or contact someone!"};n(o)})}}function Modal(e,n){return{restrict:"EA",templateUrl:"views/templates/modal.html",scope:{title:"@",action:"&",actionText:"@",show:"="},transclude:!0,link:function(o,t,r){function i(){o.clearBindings=function(){},o.error=!1,o.fadeIn=!0,n(function(){o.fadeIn=!1},100)}i(),o.close=function(){return e(function(e,t){o.clearBindings(),o.error=!1,o.fadeOut=!0,n(function(){o.show=!1,o.fadeOut=!1},100)})},o.submit=function(){if(o.error=!1,o.errorMessage=null,"function"==typeof o.action&&"action"in r){var e=o.action();e&&"function"==typeof e.then?e.then(function(e){e.clearBindings&&(o.clearBindings=e.clearBindings),o.close()},function(e){e.clearBindings&&(o.clearBindings=res.clearBindings),o.errorFlash=!0,n(function(){o.errorFlash=!1,o.error=!0,o.errorMessage=e.message},200)}):o.close()}else o.close()}}}}function AuthenticationInterceptor(e){return{request:function(n){var o=e.localStorage.token;return o&&(n.headers["x-access-token"]=o),n}}}config.$inject=["$routeProvider","$locationProvider"],angular.module("App",["ngRoute"]),angular.module("App").config(config),angular.module("App").controller("ApplicationController",["$http","$q",ApplicationController]),angular.module("App").directive("modal",["$q","$timeout",Modal]),angular.module("App").factory("AuthenticationInterceptor",["$window",AuthenticationInterceptor]),angular.module("App").config(["$httpProvider",function(e){e.interceptors.push("AuthenticationInterceptor")}]);
//# sourceMappingURL=data:application/json;base64,
